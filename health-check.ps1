# Script de Verifica√ß√£o de Sa√∫de do Sistema
# Verifica se todos os componentes est√£o funcionando corretamente

Write-Host "üîç Verificando Dashboard Anal√≠tico..." -ForegroundColor Green
Write-Host ""

$errors = @()
$warnings = @()

# Verificar Node.js
Write-Host "Verificando Node.js..." -ForegroundColor Blue
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
} catch {
    $errors += "‚ùå Node.js n√£o encontrado"
}

# Verificar npm
Write-Host "Verificando npm..." -ForegroundColor Blue
try {
    $npmVersion = npm --version
    Write-Host "‚úÖ npm: $npmVersion" -ForegroundColor Green
} catch {
    $errors += "‚ùå npm n√£o encontrado"
}

# Verificar MySQL
Write-Host "Verificando MySQL..." -ForegroundColor Blue
try {
    $mysqlVersion = mysql --version
    Write-Host "‚úÖ MySQL: $mysqlVersion" -ForegroundColor Green
} catch {
    $warnings += "‚ö†Ô∏è MySQL n√£o encontrado - necess√°rio para produ√ß√£o"
}

# Verificar depend√™ncias do backend
Write-Host "Verificando depend√™ncias do backend..." -ForegroundColor Blue
if (Test-Path "backend/node_modules") {
    Write-Host "‚úÖ Depend√™ncias do backend instaladas" -ForegroundColor Green
} else {
    $errors += "‚ùå Depend√™ncias do backend n√£o instaladas"
}

# Verificar depend√™ncias do frontend
Write-Host "Verificando depend√™ncias do frontend..." -ForegroundColor Blue
if (Test-Path "frontend/node_modules") {
    Write-Host "‚úÖ Depend√™ncias do frontend instaladas" -ForegroundColor Green
} else {
    $errors += "‚ùå Depend√™ncias do frontend n√£o instaladas"
}

# Verificar arquivos de configura√ß√£o
Write-Host "Verificando arquivos de configura√ß√£o..." -ForegroundColor Blue

if (Test-Path "backend/.env") {
    Write-Host "‚úÖ Arquivo backend/.env encontrado" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è Arquivo backend/.env n√£o encontrado"
}

if (Test-Path "frontend/.env.local") {
    Write-Host "‚úÖ Arquivo frontend/.env.local encontrado" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è Arquivo frontend/.env.local n√£o encontrado"
}

# Verificar portas
Write-Host "Verificando portas..." -ForegroundColor Blue

$portTest3000 = Test-NetConnection -ComputerName "localhost" -Port 3000 -InformationLevel "Quiet" -WarningAction SilentlyContinue
$portTest4000 = Test-NetConnection -ComputerName "localhost" -Port 4000 -InformationLevel "Quiet" -WarningAction SilentlyContinue

if ($portTest3000) {
    Write-Host "‚ö†Ô∏è Porta 3000 em uso" -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ Porta 3000 dispon√≠vel" -ForegroundColor Green
}

if ($portTest4000) {
    Write-Host "‚ö†Ô∏è Porta 4000 em uso" -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ Porta 4000 dispon√≠vel" -ForegroundColor Green
}

# Verificar estrutura de arquivos
Write-Host "Verificando estrutura de arquivos..." -ForegroundColor Blue

$requiredFiles = @(
    "package.json",
    "README.md",
    "backend/package.json",
    "backend/server.js",
    "frontend/package.json",
    "frontend/src/app/page.tsx"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file" -ForegroundColor Green
    } else {
        $errors += "‚ùå $file n√£o encontrado"
    }
}

# Verificar Git
Write-Host "Verificando Git..." -ForegroundColor Blue
try {
    $gitVersion = git --version
    Write-Host "‚úÖ Git: $gitVersion" -ForegroundColor Green

    if (Test-Path ".git") {
        Write-Host "‚úÖ Reposit√≥rio Git inicializado" -ForegroundColor Green
    } else {
        $warnings += "‚ö†Ô∏è Reposit√≥rio Git n√£o inicializado"
    }
} catch {
    $warnings += "‚ö†Ô∏è Git n√£o encontrado"
}

# Relat√≥rio final
Write-Host ""
Write-Host "üìä Relat√≥rio Final:" -ForegroundColor Cyan
Write-Host "===================" -ForegroundColor Cyan

if ($errors.Count -eq 0) {
    Write-Host "üéâ Todos os componentes cr√≠ticos est√£o funcionando!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erros encontrados:" -ForegroundColor Red
    foreach ($error in $errors) {
        Write-Host "  $error" -ForegroundColor Red
    }
}

if ($warnings.Count -gt 0) {
    Write-Host ""
    Write-Host "‚ö†Ô∏è Avisos:" -ForegroundColor Yellow
    foreach ($warning in $warnings) {
        Write-Host "  $warning" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan

if ($errors.Count -gt 0) {
    Write-Host "1. Corrija os erros listados acima" -ForegroundColor White
    Write-Host "2. Execute novamente este script" -ForegroundColor White
} else {
    Write-Host "1. Inicie o projeto: .\start.bat" -ForegroundColor White
    Write-Host "2. Acesse: http://localhost:3000" -ForegroundColor White
}

Write-Host ""
Write-Host "üîó Links √∫teis:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Frontend: http://localhost:3000" -ForegroundColor White
Write-Host "‚Ä¢ Backend API: http://localhost:4000" -ForegroundColor White
Write-Host "‚Ä¢ Configura√ß√µes: http://localhost:3000/settings" -ForegroundColor White
Write-Host "‚Ä¢ Documenta√ß√£o: README.md" -ForegroundColor White
